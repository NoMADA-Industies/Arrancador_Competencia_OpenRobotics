
Codigo_Arrancador_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000657  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f7  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000381  00000000  00000000  00000e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000345  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000088  00000000  00000000  00001549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000015d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a8 36       	cpi	r26, 0x68	; 104
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	63 d0       	rcall	.+198    	; 0x102 <main>
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <external_int>:
#define GO_		PORTB &= ~(1<<4);	PORTB |= (1<<3);	PORTB |= (1<<1);	PORTB &= ~(1<<0);


void external_int(void)
{
	GIMSK |= (1<<5);	// Habilitamos las interrupciones Pinchange
  40:	8b b7       	in	r24, 0x3b	; 59
  42:	80 62       	ori	r24, 0x20	; 32
  44:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<2);	// Habilitamos la interrupción PCINT2
  46:	aa 9a       	sbi	0x15, 2	; 21
  48:	08 95       	ret

0000004a <conf_timer0_des>:
}


void conf_timer0_des(void)
{
	TCNT0 =0;
  4a:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1<<1);	// Habilitamos la interrupcion de desbordamiento
  4c:	89 b7       	in	r24, 0x39	; 57
  4e:	82 60       	ori	r24, 0x02	; 2
  50:	89 bf       	out	0x39, r24	; 57
	TIFR |= (1<<1);		// Limpiamos la bandera de desbordamiento
  52:	88 b7       	in	r24, 0x38	; 56
  54:	82 60       	ori	r24, 0x02	; 2
  56:	88 bf       	out	0x38, r24	; 56
  58:	08 95       	ret

0000005a <__vector_5>:
}


ISR(TIMER0_OVF_vect, ISR_NAKED)
{
	TCNT0 = 0;				//	Reiniciamos el conteo.
  5a:	12 be       	out	0x32, r1	; 50
	TCCR0B &= ~(1<<1);		//	Detener el timer0
  5c:	83 b7       	in	r24, 0x33	; 51
  5e:	8d 7f       	andi	r24, 0xFD	; 253
  60:	83 bf       	out	0x33, r24	; 51
	TCCR0B &= ~(1<<0);
  62:	83 b7       	in	r24, 0x33	; 51
  64:	8e 7f       	andi	r24, 0xFE	; 254
  66:	83 bf       	out	0x33, r24	; 51
	
	switch(comando)
  68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <comando>
  6c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <comando+0x1>
  70:	8d 30       	cpi	r24, 0x0D	; 13
  72:	91 05       	cpc	r25, r1
  74:	79 f0       	breq	.+30     	; 0x94 <__vector_5+0x3a>
  76:	8f 30       	cpi	r24, 0x0F	; 15
  78:	91 05       	cpc	r25, r1
  7a:	39 f0       	breq	.+14     	; 0x8a <__vector_5+0x30>
  7c:	0b 97       	sbiw	r24, 0x0b	; 11
  7e:	71 f4       	brne	.+28     	; 0x9c <__vector_5+0x42>
	{
		case 11: RESET_ break;
  80:	c4 9a       	sbi	0x18, 4	; 24
  82:	c3 98       	cbi	0x18, 3	; 24
  84:	c1 98       	cbi	0x18, 1	; 24
  86:	c0 98       	cbi	0x18, 0	; 24
  88:	09 c0       	rjmp	.+18     	; 0x9c <__vector_5+0x42>
		case 15: READY_ break;
  8a:	c4 9a       	sbi	0x18, 4	; 24
  8c:	c3 9a       	sbi	0x18, 3	; 24
  8e:	c1 98       	cbi	0x18, 1	; 24
  90:	c0 9a       	sbi	0x18, 0	; 24
  92:	04 c0       	rjmp	.+8      	; 0x9c <__vector_5+0x42>
		case 13: GO_ break;
  94:	c4 98       	cbi	0x18, 4	; 24
  96:	c3 9a       	sbi	0x18, 3	; 24
  98:	c1 9a       	sbi	0x18, 1	; 24
  9a:	c0 98       	cbi	0x18, 0	; 24
		default: break;
	}
	
	comando=0;
  9c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <comando+0x1>
  a0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <comando>
	desborde=1;		// Bandera que nos indica que existió un desbordamiento
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	reti();
  b0:	18 95       	reti

000000b2 <__vector_2>:
}


ISR(PCINT0_vect, ISR_NAKED)
{
	if((PINB & (1<<2))==0)		//Flanco de bajada
  b2:	b2 99       	sbic	0x16, 2	; 22
  b4:	13 c0       	rjmp	.+38     	; 0xdc <__vector_2+0x2a>
	{
		if (desborde==0)
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	41 f4       	brne	.+16     	; 0xd2 <__vector_2+0x20>
		{
				TCNT0=0;				//Registro de nuestro contador va desde 0-255
  c2:	12 be       	out	0x32, r1	; 50
				TCCR0B |= (1<<1);		//Encendemos el timer0 con un prescalador de 64 (cada escalon sería de 8uS)
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	83 bf       	out	0x33, r24	; 51
				TCCR0B |= (1<<0);
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	83 bf       	out	0x33, r24	; 51
  d0:	17 c0       	rjmp	.+46     	; 0x100 <__vector_2+0x4e>
		}
		else 
		{
			desborde=0;	
  d2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	12 c0       	rjmp	.+36     	; 0x100 <__vector_2+0x4e>
		}
	}
	
	else						// Flanco de Subida
	{
		valor = TCNT0;			// contabilizar el tiempo
  dc:	82 b7       	in	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <valor+0x1>
  e4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <valor>
		TCCR0B &= ~(1<<1);		// Detener el timer0
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	83 bf       	out	0x33, r24	; 51
		TCCR0B &= ~(1<<0);
  ee:	83 b7       	in	r24, 0x33	; 51
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	83 bf       	out	0x33, r24	; 51
		dato=1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <dato+0x1>
  fc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <dato>
	}
	
	reti();	//Regreso de la interrupcion y limpia las banderas
 100:	18 95       	reti

00000102 <main>:


int main(void)
{
	
	DDRB |= (1<<0);	//PB0	Pin de RDY del arrancador
 102:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1<<1);	//PB1	Pin de GO del arrancador
 104:	b9 9a       	sbi	0x17, 1	; 23
	DDRB &= ~(1<<2);//PB2	PIN DE ENTRADA DE LA SEÑAL DEL SENSOR INFRARROJO
 106:	ba 98       	cbi	0x17, 2	; 23
	DDRB |= (1<<3);	//PB3	LED de GO
 108:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= (1<<4);	//PB4	LED de RESET	
 10a:	bc 9a       	sbi	0x17, 4	; 23
	
	external_int();		//Llamado de las funciones
 10c:	99 df       	rcall	.-206    	; 0x40 <external_int>
	conf_timer0_des();
 10e:	9d df       	rcall	.-198    	; 0x4a <conf_timer0_des>
	RESET_
 110:	c4 9a       	sbi	0x18, 4	; 24
 112:	c3 98       	cbi	0x18, 3	; 24
 114:	c1 98       	cbi	0x18, 1	; 24
 116:	c0 98       	cbi	0x18, 0	; 24
	
	sei();		// Habilitamos de manera global las interrupciones
 118:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		
		if (dato==1)
 11a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <dato>
 11e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <dato+0x1>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	91 05       	cpc	r25, r1
 126:	e9 f7       	brne	.-6      	; 0x122 <main+0x20>
		{
			dato=0;
 128:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <dato+0x1>
 12c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <dato>
			// Cada escalor de valor vale 8uS
			if (valor <= 55 && valor > 0){ comando+=1; _delay_us(1); }			// 400uS
 130:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <valor>
 134:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <valor+0x1>
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	c7 97       	sbiw	r24, 0x37	; 55
 13c:	68 f4       	brcc	.+26     	; 0x158 <main+0x56>
 13e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <comando>
 142:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <comando+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <comando+0x1>
 14c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <comando>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x50>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x56>
			if (valor <= 110 && valor > 55){ comando+=4; _delay_us(1); }		// 800uS
 158:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <valor>
 15c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <valor+0x1>
 160:	c8 97       	sbiw	r24, 0x38	; 56
 162:	c7 97       	sbiw	r24, 0x37	; 55
 164:	68 f4       	brcc	.+26     	; 0x180 <__stack+0x21>
 166:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <comando>
 16a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <comando+0x1>
 16e:	04 96       	adiw	r24, 0x04	; 4
 170:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <comando+0x1>
 174:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <comando>
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <__stack+0x1b>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <__stack+0x21>
			if (valor <= 165 && valor > 110){ comando+=6; _delay_us(1); }		// 1200uS
 180:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <valor>
 184:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <valor+0x1>
 188:	8f 56       	subi	r24, 0x6F	; 111
 18a:	91 09       	sbc	r25, r1
 18c:	c7 97       	sbiw	r24, 0x37	; 55
 18e:	28 f6       	brcc	.-118    	; 0x11a <main+0x18>
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <comando>
 194:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <comando+0x1>
 198:	06 96       	adiw	r24, 0x06	; 6
 19a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <comando+0x1>
 19e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <comando>
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <__stack+0x45>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <__stack+0x4b>
 1aa:	b7 cf       	rjmp	.-146    	; 0x11a <main+0x18>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
